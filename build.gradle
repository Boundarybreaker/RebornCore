buildscript {
	repositories {
		jcenter()
        maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.2.3-SNAPSHOT"
	}
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
	flatDir {
		dirs 'maven'
	}
}

version = "4.0.0"
group = 'RebornCore'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}


dependencies {
	minecraft "com.mojang:minecraft:1.14.3"
	mappings "net.fabricmc:yarn:1.14.3+build.9"
	modCompile "net.fabricmc:fabric-loader:0.4.8+build.155"

	//Fabric api
	modCompile "net.fabricmc.fabric-api:fabric-api:0.3.0+build.187"

	compileOnly "com.google.code.findbugs:jsr305:+"
	modCompile "io.github.prospector.modmenu:ModMenu:1.5.4-85"
}

processResources{
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.14.2'

    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'     
        expand 'version':project.version, 'mcversion': '1.14.2'
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }

	rename '(.+_at.cfg)', 'META-INF/$1'
}

//license {
//	header file('LICENSE.md')
//	include '**/*.java'
//	ignoreFailures = true //Stops the build from failing if a file does not have a license header
//}


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		maven {
			url "http://mavenupload.modmuss50.me/"
			if (project.hasProperty('mavenPass')) {
				credentials {
					username 'buildslave'
					password project.getProperty('mavenPass')
				}
			}
		}
	}
}

//apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools {
	doLast{
	def cacheFiles = new File(".gradle/curseTools")
	if (!cacheFiles.exists()) {
		cacheFiles.mkdirs()
	}

	def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

	logger.lifecycle(":downloading curseTools metadata")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

	def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
	def curseToolsVersion = metadata.versioning.release

	def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

	logger.lifecycle(":downloading CurseTools")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

	logger.lifecycle(":launching CurseTools")
	ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
		arg(value: jar.archivePath.getAbsolutePath())
	}
	}
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}
