buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		maven {
            name = "Modmuss50"
            url = "http://maven.modmuss50.me/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    maven {
        name = "Modmuss50"
        url = "http://maven.modmuss50.me/"
    }
}


repositories {
    maven {
        name = "Modmuss50"
        url = "http://maven.modmuss50.me/"
    }
    maven {
        name "tterrag Repo"
        url "http://maven.tterrag.com/"
    }
    maven {
        name "TiC"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url 'http://maven.epoxide.xyz'
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

version = "2.8.1"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
	version = "1.11-13.19.0.2130"
	mappings = "snapshot_20161115"
    replace "@MODVERSION@", project.version
    runDir = "run"
    makeObfSourceJar = false
}

group = 'RebornCore'


dependencies {
    //THIS IS NOT HOW YOU INCLUDE JSON DESTROYER! LOOK AT THE EXAMPLE!
    shade 'JSON-Destroyer:Json-Destroyer-1.10.2:2.2.3:dev'
    shade 'org.hjson:hjson:1.1.4'
   // compile "net.darkhax.tesla:Tesla:1.9.4-1.1.0.24:deobf"
    shade 'net.industrial-craft:industrialcraft-2:2.6.58-ex110:api'
}

processResources
        {
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }


task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
    classifier = 'dev'
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            include 'me/modmuss50/jsonDestroyer/'
            include 'org/hjson/'
            include 'ic2/api/'
        }
    }
}

jar {
    exclude "**/*.psd"
    classifier = 'universal'
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            include 'me/modmuss50/jsonDestroyer/'
            include 'org/hjson/'
        }
    }
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'reborncore/api/**/*'

    classifier = "api"
}

apiJar.mustRunAfter deobfJar

artifacts {
    archives deobfJar
    archives apiJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            //This is used when the build is done on a slave node
            if (project.hasProperty('mavenPass')) {
                println 'Uploading to remote Maven Repo'
                repository(url: "http://mavenupload.modmuss50.me/") {
                    authentication(userName: "buildslave", password: project.getProperty('mavenPass'))
                }
            } else {
                //this is when the build is executed on the master node
                println 'Uploading to local Maven Repo'
                repository(url: "file:///var/www/maven/")
            }

            pom.whenConfigured {
                p ->
                    p.dependencies = p.dependencies.findAll {
                        dep -> dep.artifactId != "Tesla"
                    }
            }
            
            pom {
                groupId = "RebornCore"
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description 'RebornCore'
                    url 'https://github.com/TechReborn/RebornCore'
                    scm {
                        url 'https://github.com/TechReborn/RebornCore'
                        connection 'scm:git:git@github.com:TechReborn/RebornCore.git'
                        developerConnection 'scm:git:git@github.com:TechReborn/RebornCore.git'
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/TechReborn/RebornCore/issues'
                    }
                    licenses {
                        license {
                            name 'License'
                            url 'https://raw.githubusercontent.com/TechReborn/RebornCore/master/LICENSE.md'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'modmuss50'
                            name 'modmuss50'
                            roles { role 'developer' }
                        }
                        developer {
                            id 'Gigabit101'
                            name 'Gigabit101'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    //To update the wrapper change the version bellow then run: gradle wrapper
    gradleVersion = '2.8'
}

//Thanks Matthew from #ForgeGradle https://gist.github.com/matthewprenger/108265e3efc83181bd2cc2d2fc31a853
task updateMappings(dependsOn: sourceJar) {

    def remapped = file('src_remapped/main/java')
    def methods = file('methods.csv')
    def fields = file('fields.csv')

    doLast {
snapshot_20161115
        Map<String, String> map = new HashMap<>()
        methods.eachLine { line ->
            String[] pts = line.split(",")
            map.put(pts[0], pts[1])
        }
        fields.eachLine { line ->
            String[] pts = line.split(",")
            map.put(pts[0], pts[1])
        }

        copy {
            from zipTree(sourceJar.archivePath)
            into remapped
            include '**/*.java'

            filter { javaLine ->
                map.entrySet().each { entry ->
                    javaLine = javaLine.replace(entry.getKey(), entry.getValue())
                }
                return javaLine
            }

            includeEmptyDirs = false
            eachFile { println "Processing: $it.name" }
        }
    }
}

