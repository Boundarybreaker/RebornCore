buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "Modmuss50"
			url = "http://maven.modmuss50.me/"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath "gradle.plugin.net.minecrell:licenser:0.2.1"
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: net.minecrell.gradle.licenser.Licenser

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
}

version = "3.13.1"
group = 'RebornCore'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
	mappings channel: 'snapshot', version: '20180921-1.13'

	runs {
        client = {
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            workingDirectory project.file('run').canonicalPath
        }
    }
}


dependencies {
	minecraft 'net.minecraftforge.test:forge:1.13-24.0.76-1.13-pre'
}

processResources{
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13'

    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'     
        expand 'version':project.version, 'mcversion': '1.13'
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }

	rename '(.+_at.cfg)', 'META-INF/$1'
}

license {
	header file('LICENSE.md')
	include '**/*.java'
	ignoreFailures = true //Stops the build from failing if a file does not have a license header
}

// jar {
// 	exclude "**/*.psd"
// 	classifier = 'universal'
// 	manifest {
// 		attributes 'FMLAT': 'reborncore_at.cfg'
// 	}
// }

// task apiJar(type: Jar) {
// 	from sourceSets.main.allSource
// 	from sourceSets.main.output
// 	include 'reborncore/api/**/*'

// 	classifier = "api"
// }

// apiJar.mustRunAfter jar

// artifacts {
// 	archives apiJar
// }

uploadArchives {
	repositories {
		mavenDeployer {
			//This is used when the build is done on a slave node
			if (project.hasProperty('mavenPass')) {
				println 'Uploading to remote Maven Repo'
				repository(url: "http://mavenupload.modmuss50.me/") {
					authentication(userName: "buildslave", password: project.getProperty('mavenPass'))
				}
			} else {
				//this is when the build is executed on the master node
				println 'Uploading to local Maven Repo'
				repository(url: "file:///var/www/maven/")
			}

			pom.whenConfigured {
				p ->
					p.dependencies = p.dependencies.findAll {
						dep -> dep.artifactId != "Tesla"
					}
			}

			pom {
				groupId = "RebornCore"
				version = project.version
				artifactId = project.archivesBaseName
				project {
					name project.archivesBaseName
					packaging 'jar'
					description 'RebornCore'
					url 'https://github.com/TechReborn/RebornCore'
					scm {
						url 'https://github.com/TechReborn/RebornCore'
						connection 'scm:git:git@github.com:TechReborn/RebornCore.git'
						developerConnection 'scm:git:git@github.com:TechReborn/RebornCore.git'
					}
					issueManagement {
						system 'github'
						url 'https://github.com/TechReborn/RebornCore/issues'
					}
					licenses {
						license {
							name 'License'
							url 'https://raw.githubusercontent.com/TechReborn/RebornCore/master/LICENSE.md'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'modmuss50'
							name 'modmuss50'
							roles {role 'developer'}
						}
						developer {
							id 'Gigabit101'
							name 'Gigabit101'
							roles {role 'developer'}
						}
					}
				}
			}
		}
	}
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools {
	doLast{
	def cacheFiles = new File(".gradle/curseTools")
	if (!cacheFiles.exists()) {
		cacheFiles.mkdirs()
	}

	def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

	logger.lifecycle(":downloading curseTools metadata")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

	def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
	def curseToolsVersion = metadata.versioning.release

	def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

	logger.lifecycle(":downloading CurseTools")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

	logger.lifecycle(":launching CurseTools")
	ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
		arg(value: jar.archivePath.getAbsolutePath())
	}
	}
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}
